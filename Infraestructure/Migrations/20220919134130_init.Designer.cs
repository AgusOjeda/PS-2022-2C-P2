// <auto-generated />
using System;
using Infraestructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infraestructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220919134130_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Entities.Carrito", b =>
                {
                    b.Property<Guid>("CarritoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CarritoId")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int")
                        .HasColumnName("ClienteId");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit")
                        .HasColumnName("Estado");

                    b.HasKey("CarritoId");

                    b.HasIndex("ClienteId");

                    b.ToTable("Carrito", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.CarritoProducto", b =>
                {
                    b.Property<Guid>("CarritoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int")
                        .HasColumnName("Cantidad");

                    b.HasKey("CarritoId", "ProductoId");

                    b.HasIndex("ProductoId");

                    b.ToTable("CarritoProducto", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Cliente", b =>
                {
                    b.Property<int>("ClienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClienteId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClienteId"), 1L, 1);

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("Apellido");

                    b.Property<string>("DNI")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("DNI");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Direccion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("Nombre");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(13)")
                        .HasColumnName("Telefono");

                    b.HasKey("ClienteId");

                    b.ToTable("Cliente", (string)null);

                    b.HasData(
                        new
                        {
                            ClienteId = 1,
                            Apellido = "Perez",
                            DNI = "12345678",
                            Direccion = "Av. Siempre Viva 123",
                            Nombre = "Juan",
                            Telefono = "123456789"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Orden", b =>
                {
                    b.Property<Guid>("OrdenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("OrdenId")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("CarritoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime")
                        .HasColumnName("Fecha");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("Total");

                    b.HasKey("OrdenId");

                    b.HasIndex("CarritoId")
                        .IsUnique();

                    b.ToTable("Orden", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Producto", b =>
                {
                    b.Property<int>("ProductoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductoId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductoId"), 1L, 1);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("Codigo");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Descripcion");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Image");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("Marca");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Nombre");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("Precio");

                    b.HasKey("ProductoId");

                    b.ToTable("Producto", (string)null);

                    b.HasData(
                        new
                        {
                            ProductoId = 1,
                            Codigo = "11230376006",
                            Descripcion = "Yerba Mate x1kg",
                            Image = "https://res.cloudinary.com/dywphbg73/image/upload/v1663098494/PS-2022-ProductImages/Yerba-Mate-Playadito-Suave-X1kg-1-854539_rhbph6.webp",
                            Marca = "Playadito",
                            Nombre = "Yerba Mate Playadito Suave X1kg",
                            Precio = 790.00m
                        },
                        new
                        {
                            ProductoId = 2,
                            Codigo = "11640503002",
                            Descripcion = "Atuen en aceite 120gr",
                            Image = "https://res.cloudinary.com/dywphbg73/image/upload/v1663098494/PS-2022-ProductImages/At-n-En-Aceite-La-Campagnola-120-Gr-1-3616_h50msj.webp",
                            Marca = "La Campagnola",
                            Nombre = "Atún En Aceite La Campagnola 120 Gr",
                            Precio = 407.00m
                        },
                        new
                        {
                            ProductoId = 3,
                            Codigo = "11410401001",
                            Descripcion = "Harina Para Pizza 1 Kg",
                            Image = "https://res.cloudinary.com/dywphbg73/image/upload/v1663098494/PS-2022-ProductImages/Harina-Pureza-Para-Pizza-1-Kg-1-27922_lmijmu.webp",
                            Marca = "Pureza",
                            Nombre = "Harina Pureza Para Pizza 1 Kg",
                            Precio = 170.08m
                        },
                        new
                        {
                            ProductoId = 4,
                            Codigo = "12120102003",
                            Descripcion = "Agua Baja En Sodio 2 L",
                            Image = "https://res.cloudinary.com/dywphbg73/image/upload/v1663098493/PS-2022-ProductImages/Agua-Baja-En-Sodio-Glaciar-2-L-2-237513_u085yv.webp",
                            Marca = "Glaciar",
                            Nombre = "Agua Baja En Sodio Glaciar 2 L",
                            Precio = 158.00m
                        },
                        new
                        {
                            ProductoId = 5,
                            Codigo = "12150101021",
                            Descripcion = "Agua Saborizada Pera 2,25 Lt",
                            Image = "https://res.cloudinary.com/dywphbg73/image/upload/v1663098493/PS-2022-ProductImages/Aquarius-Pera-225-L-2-468830_u3fcjl.webp",
                            Marca = "Aquarius",
                            Nombre = "Agua Saborizada Aquarius Pera 2,25 Lt",
                            Precio = 277.00m
                        },
                        new
                        {
                            ProductoId = 6,
                            Codigo = "11210551001",
                            Descripcion = "Café Instantaneo X 100g",
                            Image = "https://res.cloudinary.com/dywphbg73/image/upload/v1663098494/PS-2022-ProductImages/Caf-Instantaneo-X-100g-Segafredo-1-879237_qcjkkp.webp",
                            Marca = "Segafredo Zanetti",
                            Nombre = "Café Instantaneo X 100g Segafredo",
                            Precio = 1285.00m
                        },
                        new
                        {
                            ProductoId = 7,
                            Codigo = "12440120041",
                            Descripcion = "Cerveza 473cc Lata",
                            Image = "https://res.cloudinary.com/dywphbg73/image/upload/v1663098494/PS-2022-ProductImages/Cerveza-Imperial-Goden-473cc-Six-Pack-1-829046_nc2fyu.webp",
                            Marca = "Imperial",
                            Nombre = "Cerveza Imperial Golden 473cc Lata",
                            Precio = 240.00m
                        },
                        new
                        {
                            ProductoId = 8,
                            Codigo = "13720705002",
                            Descripcion = "Acondicionador 400ml",
                            Image = "https://res.cloudinary.com/dywphbg73/image/upload/v1663098494/PS-2022-ProductImages/Acondicionador-Dream-Long-Liss-Elvive-L-oreal-Paris-400-Ml-1-844714_cziujj.webp",
                            Marca = "Elvive",
                            Nombre = "Acondicionador Elvive Dream Long 400ml",
                            Precio = 624.00m
                        },
                        new
                        {
                            ProductoId = 9,
                            Codigo = "13710203002",
                            Descripcion = "Shampoo 400ml",
                            Image = "https://res.cloudinary.com/dywphbg73/image/upload/v1663098494/PS-2022-ProductImages/Shampoo-Dream-Long-Liss-Elvive-L-oreal-Paris-400-Ml-1-844667_ghkyas.webp",
                            Marca = "Elvive",
                            Nombre = "Shampoo Elvive Dream Long Liss 400ml",
                            Precio = 790.00m
                        },
                        new
                        {
                            ProductoId = 10,
                            Codigo = "12610902002",
                            Descripcion = "Aceite De Girasol 1.5 L",
                            Image = "https://res.cloudinary.com/dywphbg73/image/upload/v1663098494/PS-2022-ProductImages/Aceite-De-Girasol-Natura-15-L-1-247928_vsufc6.jpg",
                            Marca = "Natura",
                            Nombre = "Aceite De Girasol Natura 1.5 L",
                            Precio = 390.00m
                        });
                });

            modelBuilder.Entity("Domain.Entities.Carrito", b =>
                {
                    b.HasOne("Domain.Entities.Cliente", "ClienteNavigation")
                        .WithMany("CarritoNavigation")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClienteNavigation");
                });

            modelBuilder.Entity("Domain.Entities.CarritoProducto", b =>
                {
                    b.HasOne("Domain.Entities.Carrito", "CarritoNavigation")
                        .WithMany("CarritoProductoNavigation")
                        .HasForeignKey("CarritoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Producto", "ProductoNavigation")
                        .WithMany("CarritoProductoNavigation")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarritoNavigation");

                    b.Navigation("ProductoNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Orden", b =>
                {
                    b.HasOne("Domain.Entities.Carrito", "CarritoNavigation")
                        .WithOne("OrdenNavigation")
                        .HasForeignKey("Domain.Entities.Orden", "CarritoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarritoNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Carrito", b =>
                {
                    b.Navigation("CarritoProductoNavigation");

                    b.Navigation("OrdenNavigation")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Cliente", b =>
                {
                    b.Navigation("CarritoNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Producto", b =>
                {
                    b.Navigation("CarritoProductoNavigation");
                });
#pragma warning restore 612, 618
        }
    }
}
